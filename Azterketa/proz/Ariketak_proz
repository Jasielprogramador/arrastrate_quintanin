1-
ps -a:Terminalarekin erlazionatutako prozesuak eta sesioaren liderrak diren prozezuak kenduz, beste prozesu guztien informazioa pantailaratzen dute
ps -u:Erabiltzaileen zerrendan dauden ID edo erabiltzaile izenaren prozesuak pantailaratzen ditu
ps -x:Erabiltzailearen menpe dauden prozesu guztiak pantailaratzen ditu

2-
ps -a (Hemen gure exekutagarriaren izena bilatzen dugu eta honi lotuta dagokion prozesuaren helbidea, nire kasuan 3539 dena)
kill 3539

3-
ps -x

4-
ps -x | tee -a irteera.txt (tee -a te sirve para que siga habiendo un outputs pero ademas metes lo que te da en el output en irteera.txt)

5-
kill -SIGKILL 4271 (Modu honetan prozesua amaitu egiten dugu, baina prozesu honek datu base edo datu batzuk erabiltzen ari bazen hauek irekita geratuko dira izan ere ez diogu uzten hauek iztea)

6-
vim backup.sh
tar -czvf backup.tar.gz /home/asiertxu/Escritorio/Sistema_Eragileak/rueba
bash backup.sh

a)
at now + 1 minutes
at> bash backup.sh
CTRL+D
or
at -m 10:46 < backup.sh

b)
at 4pm + 365 days
at> bash backup.sh
CTRL+D

c)
crontab -e
00091-5**/home/asiertxu/backup.sh

d)
crontab -e
00**85 /home/asiertxu/backup.sh

e)
vim /etc/anacrontab
@monthly 15 anacron.hilabetero nice run-parts --report /etc/cron.monthly
sudo cp backup.sh /etc/cron.monthly

1.ariketa
vim 1_ariketa.c
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/wait.h>
int main(int argc,char**argv){
int rc=0,status;
if(argc!=1){
printf("uso:%s\n",argv[0]);
rc=1;
}
else if(fork()){
wait(&status);
printf("GURASOA:pid=%8dppid=%8duser-id=%8d\n",getpid(),getppid(),getuid());
printf("Semeakitzuliduenegoera-kodea:%d\n",status);
}
else{printf("SEMEA:pid=%8d\n",getpid());
}
exit(rc);
}
gcc 1_ariketa.c -o 1_ariketa
./1_ariketa

a)
Pantailan prozesu semearen eta prozesu gurasoaren id-ak aurkezten dira

b)
Gurasoa egikaritzen da lehenago, izan ere umea gurasoaren id ezberdina izan arren guztia gurasotik heredatzen du, ondorioz gurasoa egikaritu ondorenegikaritzen da

c)
Umea motelago egikaritzen denez, wait(&status)-ri esker programa umea egikaritu arte itxaron egiten du, status izeneko aldagaian umeak pasatzen duen egoera zenbakia gordetzen baita.

d)
Errore bat jasoz gero exit agindua -1 itzuliko luke, aldiz programa errorerik gabe amaitzen bada exit agindua 0 itzuliko luke.

2.ariketa

vim trapper.c
#include <signal.h>
#include <stdio.h>
#include <unistd.h>
#include <stdio.h>
void trapper(int);
int main(int argc, char *argv[]){
int i;
for(i=1;i<=64;i++){
signal(i, trapper);
}
printf("Identificador del proceso: %d\n", getpid() );
pause(); (Edozein seinale jaso arte gelditu)
printf("Continuando...\n");
return 0;
}
void trapper(int sig){
signal(sig, trapper);
printf("Se単al que he recogido: %d\n", sig);
}
Trapper izeneko programa prozesuaren identifikatzailea eta bere seinalea bueltatzen ditu

2.1)
gcc trapper.c -o trapper
./trapper

2.2)
./trapper
beste terminal batetik: kill -10 7433

2.3)
Gure kasuan 1-etik 64-rako seinalea identifikatzen beraz:
Beste terminal batetik:kill -70 7433-> Ez du egingo

2.4 eta 2.5)
#include <signal.h>
#include <stdio.h>
#include <unistd.h>
#include <stdio.h>
void trapper(int);
int main(int argc, char *argv[]){
int i;
for(i=1;i<=9;i++){
signal(i, trapper);
}
printf("Identificador del proceso: %d\n", getpid() );
pause();
printf("Continuando...\n");
return 0;
}
void trapper(int sig){
signal(sig, trapper);
printf("Se単al que he recogido: %d\n", sig);
}
Kode berria jarriz, orain gure seinale tartea 1etik 9-ra definitu egin dugu. Hala ere adibidez 10-garren seinalea,gure tartean egon ez arren bere defektuzko seinalea exekutatuko du eta traperra ez du exekutatuko.
Beste terminal batean:kill -10 7433

3)
#include <signal.h>
#include <stdio.h>
#include <unistd.h>
#include <stdio.h>
void trapper(int sig);
void kaixo(int sig);
int main(int argc, char *argv[]){
int i;
signal(10,kaixo);
for(i=1;i<=9;i++){
signal(i, trapper);
}
printf("Identificador del proceso: %d\n", getpid() );
pause();
printf("Continuando...\n");
return 0;
}
void trapper(int sig){
signal(sig, trapper);
printf("Se単al que he recogido: %d\n", sig);
}
void kaixo(int sig){
printf("Kaixo");
}
Beste terminal batetik: kill -10 8666
Modu honetan 10.seinalea jasotzean "kaixo" mezua aterako da pantailatik

3.1)
void cont(int sig);
void stop(int sig);
void ill(int sig);
int main(int argc, char *argv[]){
int i;
signal(10,kaixo);
signal(12,r2);
signal(18,cont);
signal(19,stop);
signal(9,ill);
for(i=1;i<=9;i++){
signal(i, trapper);
}
printf("Identificador del proceso: %d\n", getpid() );
pause();
printf("Continuando...\n");
return 0;
}
void trapper(int sig){
signal(sig, trapper);
printf("Se単al que he recogido: %d\n", sig);
}
void kaixo(int sig){
printf("Kaixo");
}
void r2(int sig){
printf("r2");
}
void cont(int sig){
printf("cont");
}
void stop(int sig){
printf("stop");
}
void ill(int sig){
printf("kill");
}
Beste terminal batetik:
kill -12 8666
kill -18 8669
kill -19 8765
kill -9 8672

Seinale guztiak ondo funtzionatuko lukete eta asignatu zaien mezua pantailaratuko lukete 1 izan ezin, SIGKILL-ean izan ere SIGKILL programa guztiz akabatu egiten duenez mezuarekin ere akabatzen du eta hau ez da pantailaratzen

4)
Ez izan ere seinalearen identifikatzailea parametro gisa bidaltzen da, beraz ez da berriz idatzi behar.

5)
#include <sys/types.h>
#include <signal.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[]){
pid_t pid;
int sig;
if(argc==3){
pid=(pid_t)atoi(argv[1]);
sig=atoi(argv[2]);
kill(pid, sig);
}
else {
printf("Uso correcto:\n %s pid signal\n", argv[0]);
return -1;
}
return 0;
}
gcc killer.c -o killer
./killer

5.1)
atoi funtzioak String bat integerrean bihurtzen du, gure kasuan pid_t motatakoa

5.2)
gcc -E killer.c -o killer.i
grep 'pid_t' killer.i
killer.i fitxategian ikusi dezakegun bezala int motatakoa da

5.3)
./trapper
./killer 9300 9
killer programaren bidez trapper programan definituta dagoen SIGKILL seinalea aktibatu dugu, eta ondorioz programa amaitu egin da mezurik bultatu gabe

6)
#include <signal.h>
#include <unistd.h>
#include <stdio.h>
void trapper(int);
int main(int argc, char *argv[]){
int i;
signal(14, trapper);
printf("Identificador proceso: %d\n", getpid() );
alarm(5);
pause();
alarm(3);
pause();
for(;;){
alarm(1);
pause();
}
return 0;
}
void trapper(int sig){
signal(sig, trapper);
printf("RIIIIIIIIING!\n");
}
gcc alarm.c -o alarm
./alarm

6.1)
signal(14,trapper);-->Agindu honi esker programa exekutatzen ari den bitartean 14 seinalea detektatzen badu (SIGALRM) trapper funtzioa exekutatu egingo du, eta ondorioz pantailan RIIING izeneko mezua agertuko da
for(;;){-->Agindu honi esker bukle infinitu bat eratzen dugu, gure kasuan hau egiten dugu azkenean 5 segundu eta 3 segundu itxaron ondoren RIIING bakoitza segunduro agertzeko gu programa manualki eteten dugun arte
alarm(1)-->Agindu honi esker SIGALRM seinalea bidaliko da, eta ondorioz signal(14,trapper) seinalea detektatu eta trapper funtzioa exekutatuko da RIIING pantailaratuz.Honekin batera duen parametroari esker seinalea segundu bat pasatu ondoren bidaliko dela definitu dezakegu.
pause();-->Agindu honi esker signal-a seinalerik detektatzen ez badu programa eteko du, hala ere seinale bat detektatzean programa berriz martxan jarriko da

6.2)
Programak hasieran signal(14,trapper)-rri esker SIGALRM motako seinale bat detektatzen bada, trapper funtzioa exekutatuko dela zehazten da, ondoren gure prozesuaren identifikatzailea pantailaratu egiten da eta honen ondoren alarm(5)-ari esker SIGALRM motako seinale bat programatzen da 5 segundutara, 5 segundu horiek pasatzen ari diren bitartean, programa eten egiten da pause() erabiliz, aldiz 5 segunduak pasatu ondoren SIGALRM motako seinale bat bidaltzen da, eta trapper funtzioa exekutatzen da, ondorioz RIIING izeneko mezua pantailaratzen da, ondoren prozesu berdina gertatu egiten da baina 3 segundutara, eta azkenik bukle infinitu batean sartu egiten gara non prozesua behin eta berriz segundu bakoitzero errepikatu egiten den. Bukletik ateratzeko SIGALRM motako seinalea bidali baino lehen gu programa amaitzeko seinale bat bidali beharko dugu manualki

7)
#include <sys/types.h>
#include <stdio.h>
#include <unistd.h>
#include <signal.h>
#include <stdlib.h>
void trapper(int sig){
printf("SIGUSR1\n");
}
int main(int argc, char *argv[]){
pid_t padre, hijo;
padre = getpid();
signal( SIGUSR1, trapper );
if ( (hijo=fork()) == 0 ){
/* hijo */
sleep(1);
kill(padre, SIGUSR1);
sleep(1);
kill(padre, SIGUSR1);
sleep(1);
kill(padre, SIGUSR1);
sleep(1);
kill(padre, SIGKILL);
exit(0);
}
else{
/* padre */
for (;;);
}
return 0;
}
gcc signalfork.c -o signalfork
./signalfork

7.1)
aitak semeari SIGUSR1 seinalea bidaliko balio semearen prozesua bukatuko luke, eta ondorioz aitaren prozesua loop infinitu batean geratuko litzateke.
Signal funtzioaren portaera fork egiterakoan eragin desberdina du semean izan ere semean bi seinale detektatzen dira, aitarena eta semearena.

#include <sys/types.h>
#include <stdio.h>
#include <unistd.h>
#include <signal.h>
#include <stdlib.h>
void trapper(int sig){
printf("SIGUSR1\n");
}
int main(int argc, char *argv[]){
pid_t padre, hijo;
padre = getpid();
signal( SIGUSR1, trapper );
if ( (padre=fork()) != 0 ){
/* padre */
sleep(1);
kill(hijo, SIGUSR1);
sleep(1);
kill(hijo, SIGUSR1);
sleep(1);
kill(hijo, SIGUSR1);
sleep(1);
kill(hijo, SIGKILL);
exit(0);
}
else{
/*hijo */
for (;;);
}
return 0;
}
Aita eta semearen prozesuen seinaleak detektatzen direnez SIGUSR1 bakoitza bi alditan agertuko litzateke programa SIGKILL seinalearekin amaitu baino lehen

7.2)
#include <sys/types.h>
#include <stdio.h>
#include <unistd.h>
#include <signal.h>
#include <stdlib.h>
void trapper(int sig){
printf("SIGUSR1\n");
}
int main(int argc, char *argv[]){
pid_t padre, hijo;
padre = getpid();
signal( SIGUSR1, trapper );
if ( (padre=fork()) != 0 ){
/* padre */
sleep(1);
kill(hijo,SIGUSR2);
for(;;);
}
else{
/*hijo */
sleep(10);
}
return 0;
}
Programa hau blokeatu egingo litzateke izan ere aitak bere semearen prozesua kill-eatu nahi du, baina semearen prozesua sleep(10)-rri esker ezin da amaitu izan ere etenduta dago 10 segunduetan.

8)
Originala:
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
int main(void){
char *args[]={"/bin/mkdir","lana",NULL};
if (execve("/bin/mkdir",args,NULL)==-1){
perror("execve");
exit(EXIT_FAILURE);
}
puts("No deber鱈a llegar aqui");
exit(EXIT_SUCCESS);
}

Besteak:
-execv:
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
int main(void){
char *args[]={"/bin/mkdir","lana",NULL};
if (execv("/bin/mkdir",args)==-1){
perror("execv"); 
exit(EXIT_FAILURE);
}
puts("No deber鱈a llegar aqui");
exit(EXIT_SUCCESS);
}

-execvp:
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
int main(void){
char *args[]={"/bin/mkdir","lana",NULL};
if (execvp("/bin/mkdir",args)==-1){
perror("execvp");
exit(EXIT_FAILURE);
}
puts("No deber鱈a llegar aqui");
exit(EXIT_SUCCESS);
}

9)
reloj.c:
#include <stdlib.h>
/*atoi and exit*/
#include <stdio.h>
/*printf*/
#include <unistd.h>
/*alarm*/
#include <signal.h>
/*signal and SIGALRM*/
void xtimer(){
printf("time expired.\n");
}
int main(int argc, char *argv[]){
unsigned int sec;
sec=atoi(argv[1]);
printf("time is %u\n",sec);
signal(SIGALRM,xtimer);
alarm(sec);
pause();
return 0;
}

hijo.c:
#include <unistd.h>
/*sleep*/
int main(){
sleep(6);
return 0;
}

padre.c:
#include <sys/types.h> /*kill y wait*/
#include <sys/wait.h> /*wait*/
#include <signal.h>/*kill*/
#include <stdlib.h>/*exit*/
#include <stdio.h>/*printf*/
#include <unistd.h>/*fork and exec...*/
#include <time.h> /*time*/
int main(int argc, char *argv[]){
int idHijo, idReloj, id, t1, status1, status2;
id = getpid();
printf("Proceso padre: %d\n", id);
if((idReloj = fork()) == 0) { /* hijo Reloj */
execl("reloj", "reloj", argv[1], NULL);
}
if((idHijo = fork()) == 0) { 
execv(argv[2], &argv[2]);
}
printf("Proceso hijo Perezoso: %d\n", idHijo); 
printf("Proceso hijo Reloj: %d\n", idReloj);
t1 = time(0);
if((id = wait(&status1)) == idHijo) { 
kill(idReloj, SIGKILL);
//Si el hijo ha cambiado de estado, antes de la ejecuci坦n del wait 
//entonces la llamada a wait retornar叩 inmediatamente con su estado
wait(&status2);
} else {
kill(idHijo, SIGKILL);
wait(&status2);
status1 = 1;}
t1=time(0)-t1;
printf("Tiempo del proceso hijo : %d\n", t1);
exit(status1);
}

Lehenik eta behin aitaren prozesuaren identifikatzailea pantailaratzen da, ondoren hijo Perezoso eta hijo Reloj izeneko prozesuen identifikatzaileak pantailaratu egiten dira, ondoren erlojuaren prozesuaren argv izeneko parametroa duen datuen String-en katea int-era pasatu egiten da, eta hau pantailaratu egiten da. Azkenik, umearen prozesua egikaritzeko zenbat denbora behar izan den pantailaratzen da, gure kasuan 6 dena umea.c barruan sleep(6) bat duelako
